#!/usr/bin/python

import sys

def mytail(filename, length):
    BUFSIZE = 10000
    with open(filename, 'r') as f:
        # get the length of the file
        f.seek(0,2)
        file_length = f.tell()

        # how many blocks are in the file?
        blocks = (file_length + BUFSIZE - 1) / BUFSIZE

        # find which block contains the start of the desired output data
        lines = 0
        for block in range(blocks, 0, -1):
            f.seek(block * BUFSIZE)

            data = f.read(BUFSIZE)
            block_lines = data.count('\n')

            lines += block_lines

            if lines > length:
                break

        # found the block that contains the start of the output data; now find 
        # the exact start position
        for pos, x in enumerate(data):
            if x == '\n':
                lines -= 1
            if lines - length <= 0:
                break

        # found the position of the start, print the rest of this block
        sys.stdout.write(data[pos + 1:])

        # print the rest of the file
        sys.stdout.write(f.read())


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument('--filename', '-f',
        action='store',
        required=True
    )
    parser.add_argument('--lines', '-n',
        type=int,
        required=True
    )

    args = parser.parse_args()

    mytail(args.filename, args.lines)
